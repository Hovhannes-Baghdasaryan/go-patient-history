// Code generated by ent, DO NOT EDIT.

package patiententity

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the patiententity type in the db.
	Label = "patient_entity"
	// FieldID holds the string denoting the id field in the db.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the db.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname field in the db.
	FieldSurname = "surname"
	// FieldPatronymic holds the string denoting the patronymic field in the db.
	FieldPatronymic = "patronymic"
	// FieldAge holds the string denoting the age field in the db.
	FieldAge = "age"
	// FieldGender holds the string denoting the gender field in the db.
	FieldGender = "gender"
	// FieldCountry holds the string denoting the country field in the db.
	FieldCountry = "country"
	// Table holds the table name of the patiententity in the db.
	Table = "patients"
)

// Columns holds all SQL columns for patiententity fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSurname,
	FieldPatronymic,
	FieldAge,
	FieldGender,
	FieldCountry,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale:
		return nil
	default:
		return fmt.Errorf("patiententity: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the PatientEntity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySurname orders the results by the surname field.
func BySurname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByPatronymic orders the results by the patronymic field.
func ByPatronymic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatronymic, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}
