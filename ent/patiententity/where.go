// Code generated by ent, DO NOT EDIT.

package patiententity

import (
	"github.com/Hovhannes-Baghdasaryan/go-patient-history/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldName, v))
}

// Surname applies equality check predicate on the "surname" field. It's identical to SurnameEQ.
func Surname(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldSurname, v))
}

// Patronymic applies equality check predicate on the "patronymic" field. It's identical to PatronymicEQ.
func Patronymic(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldPatronymic, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldAge, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldCountry, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContainsFold(FieldName, v))
}

// SurnameEQ applies the EQ predicate on the "surname" field.
func SurnameEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldSurname, v))
}

// SurnameNEQ applies the NEQ predicate on the "surname" field.
func SurnameNEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldSurname, v))
}

// SurnameIn applies the In predicate on the "surname" field.
func SurnameIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldSurname, vs...))
}

// SurnameNotIn applies the NotIn predicate on the "surname" field.
func SurnameNotIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldSurname, vs...))
}

// SurnameGT applies the GT predicate on the "surname" field.
func SurnameGT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGT(FieldSurname, v))
}

// SurnameGTE applies the GTE predicate on the "surname" field.
func SurnameGTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGTE(FieldSurname, v))
}

// SurnameLT applies the LT predicate on the "surname" field.
func SurnameLT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLT(FieldSurname, v))
}

// SurnameLTE applies the LTE predicate on the "surname" field.
func SurnameLTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLTE(FieldSurname, v))
}

// SurnameContains applies the Contains predicate on the "surname" field.
func SurnameContains(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContains(FieldSurname, v))
}

// SurnameHasPrefix applies the HasPrefix predicate on the "surname" field.
func SurnameHasPrefix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasPrefix(FieldSurname, v))
}

// SurnameHasSuffix applies the HasSuffix predicate on the "surname" field.
func SurnameHasSuffix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasSuffix(FieldSurname, v))
}

// SurnameEqualFold applies the EqualFold predicate on the "surname" field.
func SurnameEqualFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEqualFold(FieldSurname, v))
}

// SurnameContainsFold applies the ContainsFold predicate on the "surname" field.
func SurnameContainsFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContainsFold(FieldSurname, v))
}

// PatronymicEQ applies the EQ predicate on the "patronymic" field.
func PatronymicEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldPatronymic, v))
}

// PatronymicNEQ applies the NEQ predicate on the "patronymic" field.
func PatronymicNEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldPatronymic, v))
}

// PatronymicIn applies the In predicate on the "patronymic" field.
func PatronymicIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldPatronymic, vs...))
}

// PatronymicNotIn applies the NotIn predicate on the "patronymic" field.
func PatronymicNotIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldPatronymic, vs...))
}

// PatronymicGT applies the GT predicate on the "patronymic" field.
func PatronymicGT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGT(FieldPatronymic, v))
}

// PatronymicGTE applies the GTE predicate on the "patronymic" field.
func PatronymicGTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGTE(FieldPatronymic, v))
}

// PatronymicLT applies the LT predicate on the "patronymic" field.
func PatronymicLT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLT(FieldPatronymic, v))
}

// PatronymicLTE applies the LTE predicate on the "patronymic" field.
func PatronymicLTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLTE(FieldPatronymic, v))
}

// PatronymicContains applies the Contains predicate on the "patronymic" field.
func PatronymicContains(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContains(FieldPatronymic, v))
}

// PatronymicHasPrefix applies the HasPrefix predicate on the "patronymic" field.
func PatronymicHasPrefix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasPrefix(FieldPatronymic, v))
}

// PatronymicHasSuffix applies the HasSuffix predicate on the "patronymic" field.
func PatronymicHasSuffix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasSuffix(FieldPatronymic, v))
}

// PatronymicEqualFold applies the EqualFold predicate on the "patronymic" field.
func PatronymicEqualFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEqualFold(FieldPatronymic, v))
}

// PatronymicContainsFold applies the ContainsFold predicate on the "patronymic" field.
func PatronymicContainsFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContainsFold(FieldPatronymic, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLTE(FieldAge, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldGender, vs...))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.PatientEntity {
	return predicate.PatientEntity(sql.FieldContainsFold(FieldCountry, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PatientEntity) predicate.PatientEntity {
	return predicate.PatientEntity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PatientEntity) predicate.PatientEntity {
	return predicate.PatientEntity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PatientEntity) predicate.PatientEntity {
	return predicate.PatientEntity(sql.NotPredicates(p))
}
