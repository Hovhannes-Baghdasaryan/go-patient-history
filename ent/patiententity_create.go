// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/Hovhannes-Baghdasaryan/go-patient-history/ent/patiententity"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PatientEntityCreate is the builder for creating a PatientEntity entity.
type PatientEntityCreate struct {
	config
	mutation *PatientEntityMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pec *PatientEntityCreate) SetName(s string) *PatientEntityCreate {
	pec.mutation.SetName(s)
	return pec
}

// SetSurname sets the "surname" field.
func (pec *PatientEntityCreate) SetSurname(s string) *PatientEntityCreate {
	pec.mutation.SetSurname(s)
	return pec
}

// SetPatronymic sets the "patronymic" field.
func (pec *PatientEntityCreate) SetPatronymic(s string) *PatientEntityCreate {
	pec.mutation.SetPatronymic(s)
	return pec
}

// SetAge sets the "age" field.
func (pec *PatientEntityCreate) SetAge(i int) *PatientEntityCreate {
	pec.mutation.SetAge(i)
	return pec
}

// SetGender sets the "gender" field.
func (pec *PatientEntityCreate) SetGender(pa patiententity.Gender) *PatientEntityCreate {
	pec.mutation.SetGender(pa)
	return pec
}

// SetCountry sets the "country" field.
func (pec *PatientEntityCreate) SetCountry(s string) *PatientEntityCreate {
	pec.mutation.SetCountry(s)
	return pec
}

// SetID sets the "id" field.
func (pec *PatientEntityCreate) SetID(u uuid.UUID) *PatientEntityCreate {
	pec.mutation.SetID(u)
	return pec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pec *PatientEntityCreate) SetNillableID(u *uuid.UUID) *PatientEntityCreate {
	if u != nil {
		pec.SetID(*u)
	}
	return pec
}

// Mutation returns the PatientEntityMutation object of the builder.
func (pec *PatientEntityCreate) Mutation() *PatientEntityMutation {
	return pec.mutation
}

// Save creates the PatientEntity in the db.
func (pec *PatientEntityCreate) Save(ctx context.Context) (*PatientEntity, error) {
	pec.defaults()
	return withHooks(ctx, pec.sqlSave, pec.mutation, pec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pec *PatientEntityCreate) SaveX(ctx context.Context) *PatientEntity {
	v, err := pec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pec *PatientEntityCreate) Exec(ctx context.Context) error {
	_, err := pec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pec *PatientEntityCreate) ExecX(ctx context.Context) {
	if err := pec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pec *PatientEntityCreate) defaults() {
	if _, ok := pec.mutation.ID(); !ok {
		v := patiententity.DefaultID()
		pec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pec *PatientEntityCreate) check() error {
	if _, ok := pec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PatientEntity.name"`)}
	}
	if _, ok := pec.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "PatientEntity.surname"`)}
	}
	if _, ok := pec.mutation.Patronymic(); !ok {
		return &ValidationError{Name: "patronymic", err: errors.New(`ent: missing required field "PatientEntity.patronymic"`)}
	}
	if _, ok := pec.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "PatientEntity.age"`)}
	}
	if v, ok := pec.mutation.Age(); ok {
		if err := patiententity.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "PatientEntity.age": %w`, err)}
		}
	}
	if _, ok := pec.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "PatientEntity.gender"`)}
	}
	if v, ok := pec.mutation.Gender(); ok {
		if err := patiententity.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "PatientEntity.gender": %w`, err)}
		}
	}
	if _, ok := pec.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "PatientEntity.country"`)}
	}
	return nil
}

func (pec *PatientEntityCreate) sqlSave(ctx context.Context) (*PatientEntity, error) {
	if err := pec.check(); err != nil {
		return nil, err
	}
	_node, _spec := pec.createSpec()
	if err := sqlgraph.CreateNode(ctx, pec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pec.mutation.id = &_node.ID
	pec.mutation.done = true
	return _node, nil
}

func (pec *PatientEntityCreate) createSpec() (*PatientEntity, *sqlgraph.CreateSpec) {
	var (
		_node = &PatientEntity{config: pec.config}
		_spec = sqlgraph.NewCreateSpec(patiententity.Table, sqlgraph.NewFieldSpec(patiententity.FieldID, field.TypeUUID))
	)
	if id, ok := pec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pec.mutation.Name(); ok {
		_spec.SetField(patiententity.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pec.mutation.Surname(); ok {
		_spec.SetField(patiententity.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := pec.mutation.Patronymic(); ok {
		_spec.SetField(patiententity.FieldPatronymic, field.TypeString, value)
		_node.Patronymic = &value
	}
	if value, ok := pec.mutation.Age(); ok {
		_spec.SetField(patiententity.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := pec.mutation.Gender(); ok {
		_spec.SetField(patiententity.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := pec.mutation.Country(); ok {
		_spec.SetField(patiententity.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	return _node, _spec
}

// PatientEntityCreateBulk is the builder for creating many PatientEntity entities in bulk.
type PatientEntityCreateBulk struct {
	config
	err      error
	builders []*PatientEntityCreate
}

// Save creates the PatientEntity entities in the db.
func (pecb *PatientEntityCreateBulk) Save(ctx context.Context) ([]*PatientEntity, error) {
	if pecb.err != nil {
		return nil, pecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pecb.builders))
	nodes := make([]*PatientEntity, len(pecb.builders))
	mutators := make([]Mutator, len(pecb.builders))
	for i := range pecb.builders {
		func(i int, root context.Context) {
			builder := pecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientEntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pecb *PatientEntityCreateBulk) SaveX(ctx context.Context) []*PatientEntity {
	v, err := pecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pecb *PatientEntityCreateBulk) Exec(ctx context.Context) error {
	_, err := pecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pecb *PatientEntityCreateBulk) ExecX(ctx context.Context) {
	if err := pecb.Exec(ctx); err != nil {
		panic(err)
	}
}
