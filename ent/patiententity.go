// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/Hovhannes-Baghdasaryan/go-patient-history/ent/patiententity"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PatientEntity is the model entity for the PatientEntity schema.
type PatientEntity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// Patronymic holds the value of the "patronymic" field.
	Patronymic *string `json:"patronymic,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender patiententity.Gender `json:"gender,omitempty"`
	// Country holds the value of the "country" field.
	Country      string `json:"country,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PatientEntity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patiententity.FieldAge:
			values[i] = new(sql.NullInt64)
		case patiententity.FieldName, patiententity.FieldSurname, patiententity.FieldPatronymic, patiententity.FieldGender, patiententity.FieldCountry:
			values[i] = new(sql.NullString)
		case patiententity.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PatientEntity fields.
func (pe *PatientEntity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patiententity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case patiententity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case patiententity.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				pe.Surname = value.String
			}
		case patiententity.FieldPatronymic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patronymic", values[i])
			} else if value.Valid {
				pe.Patronymic = new(string)
				*pe.Patronymic = value.String
			}
		case patiententity.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				pe.Age = int(value.Int64)
			}
		case patiententity.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				pe.Gender = patiententity.Gender(value.String)
			}
		case patiententity.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				pe.Country = value.String
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PatientEntity.
// This includes values selected through modifiers, order, etc.
func (pe *PatientEntity) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// Update returns a builder for updating this PatientEntity.
// Note that you need to call PatientEntity.Unwrap() before calling this method if this PatientEntity
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PatientEntity) Update() *PatientEntityUpdateOne {
	return NewPatientEntityClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PatientEntity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PatientEntity) Unwrap() *PatientEntity {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: PatientEntity is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PatientEntity) String() string {
	var builder strings.Builder
	builder.WriteString("PatientEntity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(pe.Surname)
	builder.WriteString(", ")
	if v := pe.Patronymic; v != nil {
		builder.WriteString("patronymic=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", pe.Age))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", pe.Gender))
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(pe.Country)
	builder.WriteByte(')')
	return builder.String()
}

// PatientEntities is a parsable slice of PatientEntity.
type PatientEntities []*PatientEntity
